// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: grpc/nifi/nifi.proto

package nifi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FlowFileServiceClient is the client API for FlowFileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlowFileServiceClient interface {
	// Sends a FlowFile (blocking rpc)
	Send(ctx context.Context, in *FlowFileRequest, opts ...grpc.CallOption) (*FlowFileReply, error)
}

type flowFileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFlowFileServiceClient(cc grpc.ClientConnInterface) FlowFileServiceClient {
	return &flowFileServiceClient{cc}
}

func (c *flowFileServiceClient) Send(ctx context.Context, in *FlowFileRequest, opts ...grpc.CallOption) (*FlowFileReply, error) {
	out := new(FlowFileReply)
	err := c.cc.Invoke(ctx, "/org.apache.nifi.processors.grpc.FlowFileService/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlowFileServiceServer is the server API for FlowFileService service.
// All implementations must embed UnimplementedFlowFileServiceServer
// for forward compatibility
type FlowFileServiceServer interface {
	// Sends a FlowFile (blocking rpc)
	Send(context.Context, *FlowFileRequest) (*FlowFileReply, error)
	mustEmbedUnimplementedFlowFileServiceServer()
}

// UnimplementedFlowFileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFlowFileServiceServer struct {
}

func (UnimplementedFlowFileServiceServer) Send(context.Context, *FlowFileRequest) (*FlowFileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedFlowFileServiceServer) mustEmbedUnimplementedFlowFileServiceServer() {}

// UnsafeFlowFileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlowFileServiceServer will
// result in compilation errors.
type UnsafeFlowFileServiceServer interface {
	mustEmbedUnimplementedFlowFileServiceServer()
}

func RegisterFlowFileServiceServer(s grpc.ServiceRegistrar, srv FlowFileServiceServer) {
	s.RegisterService(&FlowFileService_ServiceDesc, srv)
}

func _FlowFileService_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlowFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowFileServiceServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.apache.nifi.processors.grpc.FlowFileService/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowFileServiceServer).Send(ctx, req.(*FlowFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FlowFileService_ServiceDesc is the grpc.ServiceDesc for FlowFileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlowFileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "org.apache.nifi.processors.grpc.FlowFileService",
	HandlerType: (*FlowFileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _FlowFileService_Send_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/nifi/nifi.proto",
}
